library(haven)
data <- read_sav("C:/Users/WINNY CALDERON/Downloads/LAPOP20172016.sav")
View(data)
x <- 8
z <- 10
x+z
name(data)
library(haven)
dato <- read_sav("C:/Users/WINNY CALDERON/Downloads/LAPOP20172016.sav")
View(dato)
name(dato)
ame(dato)
name(dato)
View(data)
name(data)
name (data)
names(data)
str(data)
data$q1=as.factor(data$q1)
install.packages("rio")
library(rio)
library(rio)
link_del_github="https://github.com/DataPolitica/salidas/raw/master/Data/trabajadores.sav"
trabajadores=import(link_del_github)
names(trabajadores)
library(rio)
link="https://github.com/DanaeNorah/Estadistica-para-el-Analisis-Politico-2-/raw/master/TRABAJO/basefinal.csv"
base=import(link)
str(base)
str(base$Desempleo)
library(DescTools)
Mode(base$Desempleo, na.rm = T)
Median(base$Desempleo, na.rm = T)
mean(base$Desempleo)
mean(base$Desempleo, na.rm=T)
summary(base$Desempleo)
library(psych)
describeBy(base$Desempleo)
hist(base$Desempleo)
hist(base$Desempleo, col="blue")
hist(base$Desempleo)
hist(base$Desempleo, col="blue")
boxplot(base$Desempleo, main="Boxplot de Desempleo", col="blue")
plot(base$DesigualdadGenero, base$Desempleo)
plot(base$DesigualdadGenero, base$Desempleo, xlab="Desigualdad de Genero ", ylab="Desempleo")
cor.test(base$DesigualdadGenero, base$Desempleo)
str(base$CuentaF)
Mode(base$CuentaF, na.rm = T)
Median(base$CuentaF, na.rm = T)
mean(base$CuentaF, na.rm=T)
summary(base$CuentaF)
DescribeBy(base$CuentaF)
library(psych)
describeBy(base$CuentaF)
hist(base$CuentaF, col="blue")
boxplot(base$CuentaF, main="Boxplot de Cuenta Financiera ", col="blue")
plot(base$DesigualdadGenero, base$CuentaF, xlab="Desigualdad de Genero ", ylab="Cuenta Financiera")
cor.test(base$DesigualdadGenero, base$CuentaF)
basefinal=import('https://github.com/DanaeNorah/Estadistica-para-el-Analisis-Politico-2-/raw/master/TRABAJO/basefinal.csv')
data= basefinal
str(data)
library(rio)
basefinal=import('https://github.com/DanaeNorah/Estadistica-para-el-Analisis-Politico-2-/raw/master/TRABAJO/basefinal.csv')
data= basefinal
str(data)
library(psych)
library(DescTools)
describeBy(data$VozPolitica)
summary(data$VozPolitica)
basefinal=import('https://github.com/DanaeNorah/Estadistica-para-el-Analisis-Politico-2-/raw/master/TRABAJO/basefinal.csv')
data= basefinal
str(data)
library(psych)
library(DescTools)
describeBy(data$VozPolitica)
summary(data$VozPolitica)
plot(data$DesigualdadGenero, data$VozPolitica, xlab="Desigualdad de Genero", ylab="Voz Politica")
cor.test(data$DesigualdadGenero, data$VozPolitica)
describeBy(data$LibertadMov)
summary(data$LibertadMov)
plot(data$DesigualdadGenero, data$LibertadMov, xlab="Desigualdad de Genero", ylab="Libertad de movimiento")
cor.test(data$DesigualdadGenero, data$LibertadMov)
library(rio)
basefinal=import('https://github.com/DanaeNorah/Estadistica-para-el-Analisis-Politico-2-/raw/master/TRABAJO/basefinal.csv')
data= basefinal
str(data)
describeBy(data$SecundariaC, digits=2)
View(basefinal)
anovaautonomia <- aov(data$DesigualdadGenero ~ data$Autonomia)
summary(anovaautonomia)
#Prueba de comparaciones múltiples (Tukey)
TukeyHSD(anovaautonomia)
TukeyHSD(anovaautonomia)
anovaautonomia <- aov(data$DesigualdadGenero ~ data$Autonomia)
summary(anovaautonomia)
#Prueba de comparaciones múltiples (Tukey)
TukeyHSD(anovaautonomia)
#Prueba de comparaciones múltiples (Tukey)
TukeyHSD.aov(anovaautonomia)
#Prueba de comparaciones múltiples (Tukey)
TukeyHSD(anovaautonomia)
#Prueba de comparaciones múltiples (Tukey)
TukeyHSD(anovaautonomia)
#Gráfico de medias con intervalos de confianza (ver superposición)
install.packages("gplots")
library(gplots)
plotmeans(data$DesigualdadGenero ~ Autonomia, data = data)
library(rio)
basefinal=import('https://github.com/DanaeNorah/Estadistica-para-el-Analisis-Politico-2-/raw/master/TRABAJO/basefinal.csv')
data= basefinal
str(data)
cor.test(data$DesigualdadGenero, data$VozPolitica)
plot(data$DesigualdadGenero, data$VozPolitica, xlab="Desigualdad de Genero", ylab="Voz Politica")
cor.test(data$DesigualdadGenero, data$VozPolitica)
setwd("~/PUCP/6to CICLO/ANAL POL COMPARADO (POL231)/Estadística/estadisticaWinny")
library(rio)
library(rgdal)
library(htmltab)
library(sp)
library(geojsonio)
library(rgdal)
library(stringr)
library(magrittr) # para %>% (PARSERS)
base='https://github.com/PoliticayGobiernoPUCP/estadistica_anapol2/raw/master/DATA/'
corruptionLK=paste0(base,'corruption.csv')
gdpLK=paste0(base,'gdp.csv')
demoLK=paste0(base,'demo.csv')
corru=import(corruptionLK,stringsAsFactors = F)
gdp=import(gdpLK,stringsAsFactors = F)
democ=import(demoLK,stringsAsFactors = F)
View(corru)
View(democ)
View(gdp)
names(corru)
names(gdp)
names(democ)
corru$Rank=NULL
gdp$Rank=NULL
democ$Rank=NULL
names(democ)[names(democ)=='Score']='ScoreDemo'
table(corru$Region)
table(democ$Region)
corru$Region=NULL
corrgdp=merge(corru,gdp,by.x='Country', by.y='Country')
corrgdpdemo=merge(corrgdp,democ)
head(corrgdpdemo)
tail(corrgdpdemo)
str(corrgdpdemo)
corrgdpdemo[,c(2:6)]=lapply(corrgdpdemo[,c(2:6)],as.numeric)
table(corrgdpdemo$Region)
corrgdpdemo$Region=as.factor(corrgdpdemo$Region)
table(corrgdpdemo$Region)
str(corrgdpdemo$Region)
#como antes, verificamos niveles:
table(corrgdpdemo$Regimetype)
library(dplyr)
corrgdpdemo$Regimetype= recode(corrgdpdemo$Regimetype,
'Full democracy'='4FullDemocracy',
'Flawed democracy'='3FlawedDemocracy',
'Hybrid regime'='2Hybrid regime',
'Authoritarian'='1Authoritarian')
corrgdpdemo$Regimetype=as.ordered(corrgdpdemo$Regimetype)
summary(corrgdpdemo)
df1=read.csv('https://github.com/PoliticayGobiernoPUCP/estadistica_anapol2/raw/master/DATA/interview_1_2_p1.csv')
df2=read.csv('https://github.com/PoliticayGobiernoPUCP/estadistica_anapol2/raw/master/DATA/interview_1_2_p2.csv')
df3=read.csv('https://github.com/PoliticayGobiernoPUCP/estadistica_anapol2/raw/master/DATA/interview_1_2_p3.csv')
df4=read.csv('https://github.com/PoliticayGobiernoPUCP/estadistica_anapol2/raw/master/DATA/interview_1_2_p4.csv')
names(df1) ; names(df2) ; names(df3); names(df4)
names(df1)
names(df1) ; names(df2) ; names(df3); names(df4)
head(df2)
head(df4)
df1234=rbind(df1,df2,df3,df4)
View(df1234)
Lk="https://github.com/PoliticayGobiernoPUCP/estadistica_anapol2/raw/master/DATA/AGUA.xlsx"
agua=import(Lk)
View(agua)
str(agua)
head(agua)
aggregate(cbind(todaSemana, NoTodaSemana) # dependientes
~ Departamento, # nivel
data = agua,    # data
sum)            # operacion
aggregate(cbind(todaSemana, NoTodaSemana) ~ Provincia + Departamento,
data = agua, sum)
library(tidyr)
library(stringr)
url1 = "https://www.cia.gov/library/publications/resources/the-world-factbook/fields/211rank.html"
gdp = htmltab(doc = url1,
which ='//*[@id="rankOrder"]', #herramientas de desarrollador
encoding = "UTF-8")
names(gdp)
str(gdp)
View(gdp)
gdp = gdp[,c(2,3)]
names(gdp) = c("Pais", "PBI")
summary(gdp)
gdp$pbi =   gsub("\\$", "", gdp$PBI)
gdp$pbi =   gsub(",", "", gdp$pbi)
gdp = gdp[,-2]
head(gdp$pbi,20)
url2 = "https://www.cia.gov/library/publications/resources/the-world-factbook/fields/349.html"
urban = htmltab(doc = url2,
which ='//*[@id="fieldListing"]', #herramientas de desarrollador
encoding = "UTF-8")
str(urban)
names(urban)
head(urban)
names(urban)
names(urban) = c("Pais", "Urbano")
names(urban)
head(urban)
parse_number(urban$Urbano)
library(htmltab)
library(stringr) #para limpieza de columnas (extracción de numeros, particiones)
library(readr)
parse_number(urban$Urbano)
str(urban)
View(urban)
urban$urbano = parse_number(urban$Urbano)
urban = urban[,-2]
url3 = "https://www.cia.gov/library/publications/resources/the-world-factbook/fields/274.html"
cdio = htmltab(doc = url3,
which ='//*[@id="fieldListing"]', #herramientas de desarrollador
encoding = "UTF-8")
names(cdio)
View(cdio)
str(cdio)
head(cdio)
names(cdio) = c("Pais", "co2")
head(cdio)
cdio$var1 = cdio$`co2`
cdio$numeros = parse_number(cdio$var1)
cdio$mult = str_split(string = cdio$var1,
pattern = ' ',
simplify = T)[,2]
table(cdio$mult)
cdio$mult = gsub('million',10^6,cdio$mult)
cdio$mult = gsub('billion',10^9,cdio$mult)
cdio$mult = gsub('Mt\\(2010',"1",cdio$mult)
cdio$mult = gsub('Mt\\(2012',"1",cdio$mult)
cdio$mult = gsub('Mt\\(2017',"1",cdio$mult)
cdio$mult = as.numeric(cdio$mult)
cdio$final = (cdio$numeros*cdio$mult)
cdio$final = (cdio$final/10^6)
cdio=cdio[,-c(2:5)]
names(urban)
names(gdp)
total1=merge(urban,gdp,by.x='Pais', by.y='Pais')
head(total1)
View(total1)
total1[duplicated(total1$Pais),]
total2[!complete.cases(total2),]
total2=merge(urban,gdp,all.x=T,all.y=T) #nos aseguramos de incluir todos nuestros casos
#esto signfica que estamos pidiendo que "todos los valores de X sean incluidos" y también "todos los valores de y". Presupone que la primera columna será la columna guía
head(total2)
total2[!complete.cases(total2),]
total=merge(total2,cdio,all.x=T,all.y=T)
head(total)
View(total)
total[duplicated(total$Pais),]
total
view(total)
total[!complete.cases(total),]
?grep
total[grep("World|Euro",total$Pais),]
head(total)
str(total)
duplicated(total1$Pais)
duplicated(total$Pais)
setwd("~/PUCP/6to CICLO/ANAL POL COMPARADO (POL231)/Estadística/estadisticaWinny")
library(rio)
library(rgdal)
library(htmltab)
library(sp)
library(geojsonio)
library(rgdal)
library(stringr)
library(magrittr) # para %>% (PARSERS)
library(dplyr)
library(tidyr)
library(stringr)
library(cluster)
library(plyr) # para funcion "each"
library(psych) #para hacer tablas comparadas
library(knitr) #para generar tablas html
library(kableExtra) #para generar tablas html
library(factoextra) #visualización de clusters
library(ggrepel) #para que las etiquetas de los graficos no se superpongan
# coleccion
library(htmltab)
demolink = "https://en.wikipedia.org/wiki/Democracy_Index"
demopath = '//*[@id="mw-content-text"]/div/table[2]/tbody'
demo<- htmltab(doc = demolink, which =demopath)
View(demo)
gsub('\\s','',.)
names(demo)=str_split(names(demo)," >>",simplify = T)[,1]%>%gsub('\\s','',.)
demo[,-c(1,8,9)]=lapply(demo[,-c(1,8,9)], trimws,whitespace = "[\\h\\v]")
demo$Country=gsub("Â", "",demo$Country)
names(demo)=gsub("Â", "",names(demo))
demo[,-c(1,8,9,10)]=lapply(demo[,-c(1,8,9,10)], as.numeric)
demo=demo[,-c(10)]
str(demo)
# coleccion
library(htmltab)
demolink = "https://en.wikipedia.org/wiki/Democracy_Index"
demopath = '//*[@id="mw-content-text"]/div/table[2]/tbody'
demo<- htmltab(doc = demolink, which =demopath)
ames(demo)=str_split(names(demo)," >>",simplify = T)[,1]%>%gsub('\\s','',.)
names(demo)=str_split(names(demo)," >>",simplify = T)[,1]%>%gsub('\\s','',.)
demo[,-c(1,8,9)]=lapply(demo[,-c(1,8,9)], trimws,whitespace = "[\\h\\v]") # no blanks
#en Country
demo$Country=gsub("Â", "",demo$Country)
#en todos los etiquetados
names(demo)=gsub("Â", "",names(demo))
str(demo)
demo$Country=trimws(demo$Country,whitespace = "[\\h\\v]")
str(demo)
demo=demo[,-c(1)]
str(demo)
demo=demo[,-c(10)]
str(demo)
demo[,-c(1,8,9,10)]=lapply(demo[,-c(1,8,9,10)], as.numeric)
str(demo)
demo$Continent=demo$Region
demo$Region->demo$Continent
demo$Continent=NULL
names(demo$Region)[names(demo$Region)=='Region']
names(demo$Region)[names(demo$Region)=='Region']='Continent'
names(demo$Region)=c(demo$Continent)
demo$Region)=demo$Continent
demo$Region=demo$Continent
# coleccion
library(htmltab)
demolink = "https://en.wikipedia.org/wiki/Democracy_Index"
demopath = '//*[@id="mw-content-text"]/div/table[2]/tbody'
demo<- htmltab(doc = demolink, which =demopath)
library(stringr)
library(magrittr)
names(demo)=str_split(names(demo)," >>",simplify = T)[,1]%>%gsub('\\s','',.)
demo[,-c(1,8,9)]=lapply(demo[,-c(1,8,9)], trimws,whitespace = "[\\h\\v]") # no blanks
#en Country
demo$Country=gsub("Â", "",demo$Country)
#en todos los etiquetados
names(demo)=gsub("Â", "",names(demo))
demo$Country=trimws(demo$Country,whitespace = "[\\h\\v]")
demo=demo[,-c(1)] #sin Rank
str(demo)
demo=demo[,-c(10)]
str(demo)
demo[,-c(1,8,9)]=lapply(demo[,-c(1,8,9)], as.numeric)
str(demo)
demo$Continent=demo$Region
demo$Region=NULL
str(demo$Continent)
row.names(demo)=demo$Country
demo=na.omit(demo)
library(cluster)
g.dist = daisy(demo[,c(3:7)], metric="gower")
pam.resultado=pam(g.dist,4,cluster.only = F)
demo$clusterPT=pam.resultado$cluster
aggregate(as.matrix(cbind(demo[,c(3:7)]))~ clusterPT, data=demo,
FUN=plyr::each(MD = median, Media = mean))
library(plyr)
aggregate(as.matrix(cbind(demo[,c(3:7)]))~ clusterPT, data=demo,
FUN=plyr::each(MD = median, Media = mean))
# coleccion
library(htmltab)
demolink = "https://en.wikipedia.org/wiki/Democracy_Index"
demopath = '//*[@id="mw-content-text"]/div/table[2]/tbody'
demo<- htmltab(doc = demolink, which =demopath)
library(stringr)
library(magrittr)
names(demo)=str_split(names(demo)," >>",simplify = T)[,1]%>%gsub('\\s','',.)
demo[,-c(1,8,9)]=lapply(demo[,-c(1,8,9)], trimws,whitespace = "[\\h\\v]") # no blanks
#en Country
demo$Country=gsub("Â", "",demo$Country)
#en todos los etiquetados
names(demo)=gsub("Â", "",names(demo))
demo$Country=trimws(demo$Country,whitespace = "[\\h\\v]")
demo=demo[,-c(1)] #sin Rank
demo=demo[,-c(10)]
demo[,-c(1,8,9)]=lapply(demo[,-c(1,8,9)], as.numeric) # a numerico
str(demo)
demo$Continent=demo$Region
demo$Region=NULL
str(demo$Continent)
row.names(demo)=demo$Country  #Los nombres de cada caso aparezcan en las gráficas
# alternativa a complete.cases: quitar NA's
demo=na.omit(demo)
library(cluster)
# usar en C() las dimensiones de interes: #GOWER: TODAS LAS COMBINACINES POSIBLES.
g.dist = daisy(demo[,c(3:7)], metric="gower")
pam.resultado=pam(g.dist,4,cluster.only = F)
demo$clusterPT=pam.resultado$cluster
library(plyr) # para funcion "each"..
# nota el uso de as.matrix con cbind:
aggregate(as.matrix(cbind(demo[,c(3:7)]))~ clusterPT, data=demo,
FUN=plyr::each(MD = median, Media = mean))
agg=aggregate(as.matrix(cbind(demo[,c(3:7)]))~ clusterPT,
data=demo, # luego las funciones que deseas
FUN=plyr::each(MD = median, Media = mean))
agg
tablaResumen=t(as.data.frame(agg))
tablaResumen
kable(tablaResumen, format = "html", digits = 2)%>%
kable_styling()
table(demo$clusterPT,demo$Regimetype,dnn = c('clusterPT','TipoEconomist'))
demo[demo$clusterPT==1 & demo$Regimetype=="Flawed democracy",'Country']
library(factoextra)
fviz_cluster(object = list(data=g.dist, cluster = demo$clusterPT),
geom = c("text"),
ellipse.type = "convex")
library(ggrepel)
fviz_cluster(object = list(data=g.dist, cluster = demo$clusterPT),
geom = c("text"),
ellipse = FALSE,labelsize = 5,
repel = T)
