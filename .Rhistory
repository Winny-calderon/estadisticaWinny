library(haven)
data <- read_sav("C:/Users/WINNY CALDERON/Downloads/LAPOP20172016.sav")
View(data)
x <- 8
z <- 10
x+z
name(data)
library(haven)
dato <- read_sav("C:/Users/WINNY CALDERON/Downloads/LAPOP20172016.sav")
View(dato)
name(dato)
ame(dato)
name(dato)
View(data)
name(data)
name (data)
names(data)
str(data)
data$q1=as.factor(data$q1)
install.packages("rio")
library(rio)
library(rio)
link_del_github="https://github.com/DataPolitica/salidas/raw/master/Data/trabajadores.sav"
trabajadores=import(link_del_github)
names(trabajadores)
library(rio)
link="https://github.com/DanaeNorah/Estadistica-para-el-Analisis-Politico-2-/raw/master/TRABAJO/basefinal.csv"
base=import(link)
str(base)
str(base$Desempleo)
library(DescTools)
Mode(base$Desempleo, na.rm = T)
Median(base$Desempleo, na.rm = T)
mean(base$Desempleo)
mean(base$Desempleo, na.rm=T)
summary(base$Desempleo)
library(psych)
describeBy(base$Desempleo)
hist(base$Desempleo)
hist(base$Desempleo, col="blue")
hist(base$Desempleo)
hist(base$Desempleo, col="blue")
boxplot(base$Desempleo, main="Boxplot de Desempleo", col="blue")
plot(base$DesigualdadGenero, base$Desempleo)
plot(base$DesigualdadGenero, base$Desempleo, xlab="Desigualdad de Genero ", ylab="Desempleo")
cor.test(base$DesigualdadGenero, base$Desempleo)
str(base$CuentaF)
Mode(base$CuentaF, na.rm = T)
Median(base$CuentaF, na.rm = T)
mean(base$CuentaF, na.rm=T)
summary(base$CuentaF)
DescribeBy(base$CuentaF)
library(psych)
describeBy(base$CuentaF)
hist(base$CuentaF, col="blue")
boxplot(base$CuentaF, main="Boxplot de Cuenta Financiera ", col="blue")
plot(base$DesigualdadGenero, base$CuentaF, xlab="Desigualdad de Genero ", ylab="Cuenta Financiera")
cor.test(base$DesigualdadGenero, base$CuentaF)
basefinal=import('https://github.com/DanaeNorah/Estadistica-para-el-Analisis-Politico-2-/raw/master/TRABAJO/basefinal.csv')
data= basefinal
str(data)
library(rio)
basefinal=import('https://github.com/DanaeNorah/Estadistica-para-el-Analisis-Politico-2-/raw/master/TRABAJO/basefinal.csv')
data= basefinal
str(data)
library(psych)
library(DescTools)
describeBy(data$VozPolitica)
summary(data$VozPolitica)
basefinal=import('https://github.com/DanaeNorah/Estadistica-para-el-Analisis-Politico-2-/raw/master/TRABAJO/basefinal.csv')
data= basefinal
str(data)
library(psych)
library(DescTools)
describeBy(data$VozPolitica)
summary(data$VozPolitica)
plot(data$DesigualdadGenero, data$VozPolitica, xlab="Desigualdad de Genero", ylab="Voz Politica")
cor.test(data$DesigualdadGenero, data$VozPolitica)
describeBy(data$LibertadMov)
summary(data$LibertadMov)
plot(data$DesigualdadGenero, data$LibertadMov, xlab="Desigualdad de Genero", ylab="Libertad de movimiento")
cor.test(data$DesigualdadGenero, data$LibertadMov)
library(rio)
basefinal=import('https://github.com/DanaeNorah/Estadistica-para-el-Analisis-Politico-2-/raw/master/TRABAJO/basefinal.csv')
data= basefinal
str(data)
describeBy(data$SecundariaC, digits=2)
View(basefinal)
anovaautonomia <- aov(data$DesigualdadGenero ~ data$Autonomia)
summary(anovaautonomia)
#Prueba de comparaciones múltiples (Tukey)
TukeyHSD(anovaautonomia)
TukeyHSD(anovaautonomia)
anovaautonomia <- aov(data$DesigualdadGenero ~ data$Autonomia)
summary(anovaautonomia)
#Prueba de comparaciones múltiples (Tukey)
TukeyHSD(anovaautonomia)
#Prueba de comparaciones múltiples (Tukey)
TukeyHSD.aov(anovaautonomia)
#Prueba de comparaciones múltiples (Tukey)
TukeyHSD(anovaautonomia)
#Prueba de comparaciones múltiples (Tukey)
TukeyHSD(anovaautonomia)
#Gráfico de medias con intervalos de confianza (ver superposición)
install.packages("gplots")
library(gplots)
plotmeans(data$DesigualdadGenero ~ Autonomia, data = data)
library(rio)
basefinal=import('https://github.com/DanaeNorah/Estadistica-para-el-Analisis-Politico-2-/raw/master/TRABAJO/basefinal.csv')
data= basefinal
str(data)
cor.test(data$DesigualdadGenero, data$VozPolitica)
plot(data$DesigualdadGenero, data$VozPolitica, xlab="Desigualdad de Genero", ylab="Voz Politica")
cor.test(data$DesigualdadGenero, data$VozPolitica)
setwd("~/PUCP/6to CICLO/ANAL POL COMPARADO (POL231)/Estadística/estadisticaWinny")
install.packages("rio")
install.packages("htmltab")
install.packages("sp")
install.packages("geojsonio")
install.packages("rgdal")
library(rio)
library(rgdal)
library(htmltab)
library(sp)
library(geojsonio)
library(rgdal)
linkPage="https://www.nationsonline.org/oneworld/corruption.htm"
linkPath = "/html/body/table[3]"
library(htmltab)
corrupcion = htmltab(doc = linkPage,
which =linkPath)
head(corrupcion)
tail(corrupcion)
library(htmltab)
linkCIA_urb = "https://www.cia.gov/library/publications/resources/the-world-factbook/fields/349.html"
linkPath_urb='//*[@id="fieldListing"]'
urban = htmltab(doc = linkCIA_urb,
which =linkPath_urb)
head(urban)
urban[1,2]
library(htmltab)
linkCIA_urb = "https://www.cia.gov/library/publications/resources/the-world-factbook/fields/349.html"
linkPath_urb='//*[@id="fieldListing"]'
urban = htmltab(doc = linkCIA_urb,
which =linkPath_urb)
install.packages("stringr")
library(stringr)
str_extract_all(string = '25.3%,0% y 23.5% 13 34 hola',pattern="\\d")
str_extract_all('25.3%,0% y 23.5% 13 34 hola',
"\\d+")
# numero entero, seguido opcionalmente de punto, mas numero de una o mas cifras.
str_extract_all('25.3%,0% y 23.5% 13 34 hola',
"\\d+\\.*\\d*")
str_extract_all('25.3%,0% y 23.5% 13 34 hola',
"\\d+\\.*\\d*\\%")
str_extract_all('25.3%,0% y 23.5% 13 34 hola',
"(\\d+\\.*\\d*)(?=\\%)")
str_extract_all('25.3%,0% y -23.5% 13 34 hola',
"(\\d+\\.*\\d*)(?=\\%)")
str_extract_all('25.3%,0% y -23.5% 13 34 hola',
"(\\-*\\d+\\.*\\d*)(?=\\%)")
str_extract_all('25.3%, 0%y 23%',
"(\\-*\\d+\\.*\\d*)(?=\\%)")[[1]]
View(corrupcion)
View(urban)
# primer valor es
str_extract_all('25%, 0% y 23.5%',
"(\\-*\\d+\\.*\\d*)(?=\\%)")[[1]][1]
str_extract_all('25%, 0% y 23.5%',
"(\\-*\\d+\\.*\\d*)(?=\\%)")[[1]][2]
# tercer valor es
str_extract_all('25%, 0% y 23.5%',
"(\\-*\\d+\\.*\\d*)(?=\\%)")[[1]][3]
str_extract_all(urban$Urbanization,
"(\\-*\\d+\\.*\\d*)(?=\\%)")
str_extract_all(urban$Urbanization,
"(\\-*\\d+\\.*\\d*)(?=\\%)",
simplify = T)
PATRON="(\\-*\\d+\\.*\\d*)(?=\\%)"
COLSUCIA=urban$Urbanization
# UNA COLUMNA
urban$pop_urb=str_extract_all(string = COLSUCIA,
pattern= PATRON,
simplify = T)[,1]
# OTRA COLUMNA
urban$rate_urb=str_extract_all(string = COLSUCIA,
pattern=PATRON,
simplify = T)[,2]
head(urban[,-2]) # sin mostrar la columna 'sucia'
# recuerda:
test=urban[1,2]
test
str_split(string = test,
pattern = 'rate of urbanization:')
urban$pop_urb2=str_split(string = urban$Urbanization,
pattern = 'rate of urbanization:',
simplify = T)[,1]
urban$rate_urb2=str_split(string = urban$Urbanization,
pattern = 'rate of urbanization:',
simplify = T)[,2]
urban$pop_urb2[1]
urban$pop_urb2[2]
urban$pop_urb2[1]
urban$pop_urb2[2]
urban$pop_urb2[1]
urban$pop_urb2=str_split(urban$pop_urb2,
'% of total',
simplify = T)[,1]
urban$pop_urb2[1]
urban$pop_urb2=str_split(urban$pop_urb2,
':',
simplify = T)[,2]
#tengo
urban$pop_urb2
urban$rate_urb2[1]
urban$rate_urb2=str_split(urban$rate_urb2,
'%',
simplify = T)[,1]
head(urban[,-2])
library(readr)
parse_number(x = "$139,100 32")
parse_number(urban$Urbanization)
library(magrittr)
str_split(string = urban$Urbanization,
pattern = 'rate of urbanization:',
simplify = T)[,1]%>%parse_number()
str_split(string = urban$Urbanization,
pattern = 'rate of urbanization:',
simplify = T)[,2]%>%parse_number()
porcentajes=c('13%','33%','55%')
gsub('%',"",porcentajes)
gsub(',|\\$',"","$139,100")
str(urban)
urban[,c(2,5,6)]=NULL
urban[,-1]=lapply(urban[,-1], as.numeric)
urban[!complete.cases(urban),]
textos=c(' abc','pqr ', ' xyz ')
trimws(textos,whitespace = "[\\h\\v]")
urban$Country=trimws(urban$Country,whitespace = "[\\h\\v]")
urban$Country
str(urban)
library(rio)
data=import("data.csv")
names(data)[2]='labor'
str_split(string = data$labor,
pattern = ':',
simplify = T)
data$agricultura= str_split(string = data$labor,
pattern = ':',
simplify = T)[,2]
View(data)
data$agricultura2=str_split(string = data$agricultura,
pattern = '%',
simplify = T)[,1]
str(data$agricultura2)
data$agricultura2 = as.numeric(data$agricultura2)
LinkDemo="https://en.wikipedia.org/wiki/Democracy_Index"
LinkPath_demo='//*[@id="mw-content-text"]/div[1]/table[2]'
democracy = htmltab(doc = LinkDemo,
which =LinkPath_demo)
View(democracy)
names(democracy)=str_split(string = names(democracy),
pattern = ' >>', simplify = T)[,1]
names(democracy)=gsub(" ", "",names(democracy))
#en Country
democracy$Country=gsub("Â", "",democracy$Country)
#en todos los etiquetados
names(democracy)=gsub("Â", "",names(democracy))
link_indices="https://en.wikipedia.org/wiki/List_of_freedom_indices"
linkPath_indices='//*[@id="mw-content-text"]/div[1]/table[2]'
indices= htmltab(doc = link_indices,
which =linkPath_indices)
View(indices)
indices[1,2]
head(indices)
indices[!complete.cases(indices),]
head(indices)
indices$`2020 Index of Economic Freedom`=trimws(indices$`2020 Index of Economic Freedom`,whitespace = "[\\h\\v]")
head(indices)
names(indices)
indices$Country=gsub("Â", "",indices$Country)
head(indices)
link_comparison="https://www.cia.gov/library/publications/resources/the-world-factbook/fields/211rank.html"
linkPath_comparison= '//*[@id="rankOrder"]'
comparison= htmltab(doc = link_comparison,
which =linkPath_comparison)
View(comparison)
comparison[1,4]
str_extract_all(comparison$`GDP - per capita (PPP)`,
"(\\d+\\.*\\d*)(?=\\%)")
str_extract_all(comparison$`GDP - per capita (PPP)`,
"(\\d+\\.*\\d*)(?=\\$)")
comparison$GDP=str_extract_all(comparison$`GDP - per capita (PPP)`,
"(\\d+\\.*\\d*)(?=\\$)",
simplify = T)
comparison$GDP=NULL
comparison$`GDP - per capita (PPP)`=gsub("$", "",comparison$`GDP - per capita (PPP)`)
str_split(comparison$`GDP - per capita (PPP)`,
'$',
simplify = T)[,2]
str_extract_all(comparison$`GDP - per capita (PPP)`,
"(\\-*\\d+\\.*\\d*)(?=\\%)")
head(comparison)
str_split(comparison$`Date of Information`,
' ',
simplify = T)[,1]
comparison$`Date of Information`=str_split(comparison$`Date of Information`,
' ',
simplify = T)[,1]
str(comparison$`Date of Information`)
comparison$`Date of Information`=as.numeric(comparison$`Date of Information`)
str(comparison$`Date of Information`)
str_split(string = comparison$`GDP - per capita (PPP)`,
pattern = '$')
str_extract_all(string = PP,
pattern= PATRON,
simplify = T)[,1]
PATRON="(\\-*\\d+\\.*\\d*)"
PP=comparison$`GDP - per capita (PPP)
str_extract_all(string = PP,
pattern= PATRON,
simplify = T)[,1]
comparison$GDP=str_extract_all(string = PP,
pattern= PATRON,
simplify = T)[,1]
head(comparison)
base='https://github.com/PoliticayGobiernoPUCP/estadistica_anapol2/raw/master/DATA/'
corruptionLK=paste0(base,'corruption.csv')
gdpLK=paste0(base,'gdp.csv')
demoLK=paste0(base,'demo.csv')
corru=import(corruptionLK,stringsAsFactors = F)
gdp=import(gdpLK,stringsAsFactors = F)
democ=import(demoLK,stringsAsFactors = F)
2+2
